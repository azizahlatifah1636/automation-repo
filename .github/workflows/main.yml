name: Pipeline Automation CI/CD

# Event triggers - pipeline akan berjalan pada kondisi berikut
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:
    # Allow manual trigger

jobs:
  # Job untuk testing API
  api-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install API dependencies
      run: |
        cd api
        npm ci
    
    - name: Run API linting
      run: |
        cd api
        npm run lint
      continue-on-error: true
    
    - name: Run API unit tests
      run: |
        cd api
        npm run test:unit
      continue-on-error: true
    
    - name: Run API integration tests
      run: |
        cd api
        npm run test:integration
      continue-on-error: true
    
    - name: Generate API test coverage report
      run: |
        cd api
        npm run test:coverage
      continue-on-error: true
    
    - name: Upload API test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results-node-${{ matrix.node-version }}
        path: |
          api/coverage/
          api/test-results/
          api/reports/
        retention-days: 30

  # Job untuk testing Web UI
  web-ui-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        browser: [chrome, firefox]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install Web UI dependencies
      run: |
        cd web-ui
        npm ci
    
    - name: Run Web UI linting
      run: |
        cd web-ui
        npm run lint
      continue-on-error: true
    
    - name: Build Web UI
      run: |
        cd web-ui
        npm run build
      continue-on-error: true
    
    - name: Run Web UI unit tests
      run: |
        cd web-ui
        npm run test:unit
      continue-on-error: true
    
    - name: Install Playwright browsers
      run: |
        cd web-ui
        npx playwright install ${{ matrix.browser }}
    
    - name: Run E2E tests with Playwright
      run: |
        cd web-ui
        npx playwright test --project=${{ matrix.browser }}
      continue-on-error: true
    
    - name: Upload Web UI test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: web-ui-test-results-node-${{ matrix.node-version }}-${{ matrix.browser }}
        path: |
          web-ui/test-results/
          web-ui/coverage/
          web-ui/playwright-report/
          web-ui/screenshots/
        retention-days: 30

  # Job untuk Docker build dan security scan
  docker-build:
    runs-on: ubuntu-latest
    needs: [api-tests, web-ui-tests]
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API Docker image
      run: |
        docker build -t pipeline-automation-api:${{ github.sha }} ./api
    
    - name: Build Web UI Docker image
      run: |
        docker build -t pipeline-automation-web:${{ github.sha }} ./web-ui
    
    - name: Run Trivy vulnerability scanner on API image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'pipeline-automation-api:${{ github.sha }}'
        format: 'sarif'
        output: 'api-trivy-results.sarif'
    
    - name: Run Trivy vulnerability scanner on Web UI image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'pipeline-automation-web:${{ github.sha }}'
        format: 'sarif'
        output: 'web-ui-trivy-results.sarif'
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          api-trivy-results.sarif
          web-ui-trivy-results.sarif
        retention-days: 30

  # Job untuk performance testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [api-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Start API server for testing
      run: |
        cd api
        npm ci
        npm start &
        sleep 10
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        cd performance-tests
        k6 run --out json=results.json api-load-test.js
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          performance-tests/results.json
        retention-days: 30

  # Job untuk deploy ke staging (hanya untuk push ke main)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [api-tests, web-ui-tests, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.pipeline-automation.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "API Image: pipeline-automation-api:${{ github.sha }}"
        echo "Web UI Image: pipeline-automation-web:${{ github.sha }}"
        # Add actual deployment commands here
    
    - name: Run smoke tests
      run: |
        cd smoke-tests
        npm ci
        npm run test:staging
      continue-on-error: true
    
    - name: Upload deployment logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-logs
        path: |
          deployment-logs/
        retention-days: 7

  # Job untuk generate consolidated report
  generate-report:
    runs-on: ubuntu-latest
    needs: [api-tests, web-ui-tests, docker-build, performance-tests]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate consolidated test report
      run: |
        echo "# Pipeline Automation Test Report" > test-report.md
        echo "**Build:** ${{ github.sha }}" >> test-report.md
        echo "**Date:** $(date)" >> test-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> test-report.md
        echo "" >> test-report.md
        echo "## Test Results Summary" >> test-report.md
        echo "- API Tests: ${{ needs.api-tests.result }}" >> test-report.md
        echo "- Web UI Tests: ${{ needs.web-ui-tests.result }}" >> test-report.md
        echo "- Docker Build: ${{ needs.docker-build.result }}" >> test-report.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-report.md
    
    - name: Upload consolidated report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: consolidated-test-report
        path: |
          test-report.md
        retention-days: 90

# Environment variables global
env:
  NODE_ENV: test
  API_BASE_URL: http://localhost:3000
  WEB_UI_BASE_URL: http://localhost:8080